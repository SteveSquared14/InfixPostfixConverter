#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ Main\ method\ to\ be\ used\ with\ the\ .jar\ file\ exported\ from\ this\ project\r\n
comment1.params=
comment1.target=Converter()
comment1.text=\r\n\ Constructor\ for\ Converter\ class\r\n\ No\ parameters\ required\ as\ the\ field\ is\ set\ using\ user\ input\r\n\ which\ is\ located\ in\ a\ seperate\ method\ which\ is\ called\ in\ \r\n\ the\ Constructor\ body\r\n
comment10.params=
comment10.target=void\ expressionLengthError()
comment10.text=\r\n\ Outputs\ an\ error\ message\ to\ the\ user\ related\ to\ the\ expression\ being\ the\ wrong\ length\r\n
comment11.params=
comment11.target=void\ invalidOperatorError()
comment11.text=\r\n\ Outputs\ an\ error\ message\ related\ to\ incorrect\ operators\ being\ entered\r\n
comment12.params=
comment12.target=void\ dijkstrasTwoStackAlgorithm()
comment12.text=\r\n\ Dijkstra's\ Two\ Stack\ Algorithm,\ used\ to\ convert\ the\ users\ expression\ to\ postfix\ form\r\n
comment2.params=
comment2.target=java.lang.String\ getUserExpression()
comment2.text=\r\n\ Accessor\ method\ for\ the\ user\ expression\r\n\ @return\ the\ current\ value\ assigned\ to\ the\ userExpression\ field\r\n
comment3.params=changeUserExpression
comment3.target=void\ setUserExpression(java.lang.String)
comment3.text=\r\n\ Mutator\ method\ for\ changing\ the\ userExpression\ field\r\n\ @param\ the\ new\ expression\ \r\n
comment4.params=
comment4.target=void\ getUserInput()
comment4.text=\r\n\ Makes\ a\ new\ scanner\ object\ that\ takes\ the\ user\ input\ which\r\n\ is\ their\ expression\r\n
comment5.params=testExpression
comment5.target=boolean\ checkExpressionLength(java.lang.String)
comment5.text=\r\n\ The\ length\ of\ the\ expression\ cannot\ be\ more\ than\ 20\ characters\ so\r\n\ if\ it\ is,\ return\ false\r\n\ Returns\ true\ otherwise\r\n\ @param\ the\ expression\ to\ be\ checked\r\n
comment6.params=
comment6.target=boolean\ checkFullyParenthesised()
comment6.text=\r\n\ Calls\ to\ the\ two\ methods\ for\ checking\ if\ the\ user's\ expression\ is\ fully\ parenthesised,\ in\ the\ correct\ order\r\n\ If\ the\ expression\ contains\ the\ correct\ number\ of\ parentheses,\ then\ check\ the\ order\ those\ parentheses\ are\ in\r\n\ @return\ the\ boolean\ outcome.\ If\ both\ intermediate\ methods\ return\ true,\ the\ returns\ true.\ Returns\ false\ otherwise\r\n
comment7.params=
comment7.target=boolean\ checkNumberOfParentheses()
comment7.text=\r\n\ For\ an\ expression\ to\ be\ fully\ parenthesised,\ each\ operator\ must\ be\ surrounded\ by\ a\ pair\ of\ parentheses.\ Thus,\ if\ the\ total\ number\ of\r\n\ parentheses\ in\ the\ expression\ divided\ by\ the\ total\ number\ of\ operators\ in\ the\ expression\ equals\ 2\ then\ we\ know\ the\ expression\ inputted\r\n\ by\ the\ user\ contains\ the\ correct\ number\ of\ parentheses\r\n\ @return\ the\ boolean\ outcome\ of\ the\ check,\ true\ if\ numberOfParentheses/numberOfOperators\=\=2,\ false\ otherwise\r\n
comment8.params=
comment8.target=boolean\ checkParenthesesOrder()
comment8.text=\r\n\ For\ an\ expression\ to\ be\ fully\ parenthesised,\ each\ opening\ parentheses\ must\ be\ followed\r\n\ by\ a\ closing\ parentheses\ of\ the\ same\ type.\ So\ a\ (\ must\ be\ followed\ by\ \ ),\ but\ a\ (\ cannot\r\n\ be\ followed\ by\ a\ }\ or\ a\ ],\ for\ example\r\n\ @return\ true\ if\ all\ parentheses\ are\ in\ correct\ order,\ returns\ false\ otherwise\r\n
comment9.params=
comment9.target=void\ parenthesesError()
comment9.text=\r\n\ Outputs\ an\ error\ message\ to\ the\ user\ related\ to\ incorrect\ parentheses/parenthesising\r\n
numComments=13
